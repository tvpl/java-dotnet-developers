syntax = "proto3";

package com.learning.micronaut.proto;

option java_package = "com.learning.micronaut.proto";
option java_outer_classname = "UserProto";
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";

// Modelo de usuário para demonstrar serialização Protobuf
// Similar a um DTO/Model no .NET, mas com serialização binária otimizada
message User {
  string id = 1;
  string name = 2;
  string email = 3;
  int32 age = 4;
  UserStatus status = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
  repeated string tags = 8;
  UserProfile profile = 9;
}

// Perfil do usuário como mensagem aninhada
message UserProfile {
  string bio = 1;
  string avatar_url = 2;
  Address address = 3;
  repeated SocialLink social_links = 4;
}

// Endereço do usuário
message Address {
  string street = 1;
  string city = 2;
  string state = 3;
  string zip_code = 4;
  string country = 5;
}

// Links de redes sociais
message SocialLink {
  string platform = 1;
  string url = 2;
}

// Enum para status do usuário
enum UserStatus {
  UNKNOWN = 0;
  ACTIVE = 1;
  INACTIVE = 2;
  SUSPENDED = 3;
  PENDING = 4;
}

// Mensagens para requests/responses da API gRPC
message CreateUserRequest {
  string name = 1;
  string email = 2;
  int32 age = 3;
  UserProfile profile = 4;
}

message CreateUserResponse {
  User user = 1;
  bool success = 2;
  string message = 3;
}

message GetUserRequest {
  string id = 1;
}

message GetUserResponse {
  User user = 1;
  bool found = 2;
}

message UpdateUserRequest {
  string id = 1;
  User user = 2;
}

message UpdateUserResponse {
  User user = 1;
  bool success = 2;
  string message = 3;
}

message DeleteUserRequest {
  string id = 1;
}

message DeleteUserResponse {
  bool success = 1;
  string message = 2;
}

message ListUsersRequest {
  int32 page = 1;
  int32 size = 2;
  string filter = 3;
}

message ListUsersResponse {
  repeated User users = 1;
  int32 total = 2;
  int32 page = 3;
  int32 size = 4;
}

// Serviço gRPC para operações de usuário
// Similar a um Controller no .NET, mas usando gRPC ao invés de HTTP REST
service UserService {
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);
}

