#!/bin/bash

# Script para criar t√≥picos Kafka necess√°rios para a aplica√ß√£o

set -e

echo "üì® Configurando t√≥picos Kafka para Micronaut Learning Project..."

# Verificar se Kafka est√° rodando
if ! nc -z localhost 9092; then
    echo "‚ùå Kafka n√£o est√° acess√≠vel na porta 9092"
    echo "   Execute primeiro: ./scripts/start-infrastructure.sh"
    exit 1
fi

# Fun√ß√£o para criar t√≥pico
create_topic() {
    local topic_name=$1
    local partitions=${2:-3}
    local replication=${3:-1}
    
    echo "  Criando t√≥pico: $topic_name (parti√ß√µes: $partitions, replica√ß√£o: $replication)"
    
    docker-compose exec kafka kafka-topics \
        --create \
        --topic "$topic_name" \
        --partitions "$partitions" \
        --replication-factor "$replication" \
        --bootstrap-server localhost:9092 \
        --if-not-exists
}

echo ""
echo "üèóÔ∏è  Criando t√≥picos..."

# T√≥picos principais da aplica√ß√£o
create_topic "user-events" 3 1
create_topic "notifications" 3 1
create_topic "audit-events" 2 1
create_topic "metrics-events" 2 1

# T√≥picos para dead letter queues
create_topic "user-events-dlq" 1 1
create_topic "notifications-dlq" 1 1

echo ""
echo "üìã Listando t√≥picos criados:"
docker-compose exec kafka kafka-topics \
    --list \
    --bootstrap-server localhost:9092

echo ""
echo "üìä Detalhes dos t√≥picos:"
docker-compose exec kafka kafka-topics \
    --describe \
    --bootstrap-server localhost:9092

echo ""
echo "‚úÖ T√≥picos Kafka configurados com sucesso!"
echo ""
echo "üîç Para monitorar mensagens em um t√≥pico:"
echo "  docker-compose exec kafka kafka-console-consumer \\"
echo "    --bootstrap-server localhost:9092 \\"
echo "    --topic user-events \\"
echo "    --from-beginning"
echo ""
echo "üìù Para enviar mensagem de teste:"
echo "  docker-compose exec kafka kafka-console-producer \\"
echo "    --bootstrap-server localhost:9092 \\"
echo "    --topic user-events"

